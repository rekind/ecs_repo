'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class SIMAMAT_DEVEntities
    Inherits DbContext

    Public Sub New()
        MyBase.New("name=SIMAMAT_DEVEntities")
    End Sub

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property CONTRACTDOCUMENTs() As DbSet(Of CONTRACTDOCUMENT)
    Public Overridable Property CONTRACTDOCUMENT_CATEGORY() As DbSet(Of CONTRACTDOCUMENT_CATEGORY)
    Public Overridable Property CONTRACTDOCUMENT_ROLE() As DbSet(Of CONTRACTDOCUMENT_ROLE)
    Public Overridable Property DISCIPLINEs() As DbSet(Of DISCIPLINE)
    Public Overridable Property Employees() As DbSet(Of Employee)
    Public Overridable Property MAINMENUs() As DbSet(Of MAINMENU)
    Public Overridable Property MAINMENU_ROLE_PERMISSION() As DbSet(Of MAINMENU_ROLE_PERMISSION)
    Public Overridable Property PROJECTs() As DbSet(Of PROJECT)
    Public Overridable Property PROJECTMEMBERs() As DbSet(Of PROJECTMEMBER)
    Public Overridable Property ROLEs() As DbSet(Of ROLE)
    Public Overridable Property sysdiagrams() As DbSet(Of sysdiagram)
    Public Overridable Property vEMPLOYEEs() As DbSet(Of vEMPLOYEE)
    Public Overridable Property vEMPLOYEEPASSes() As DbSet(Of vEMPLOYEEPASS)
    Public Overridable Property vLOGINs() As DbSet(Of vLOGIN)

    Public Overridable Function SP_UPDATE_MTOHISTORY(pROJECTCODE As String) As Integer
        Dim pROJECTCODEParameter As ObjectParameter = If(pROJECTCODE IsNot Nothing, New ObjectParameter("PROJECTCODE", pROJECTCODE), New ObjectParameter("PROJECTCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_UPDATE_MTOHISTORY", pROJECTCODEParameter)
    End Function

    Public Overridable Function SP_TRANSFER_TO_MTOHISTORY(pROJID As String) As Integer
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_TRANSFER_TO_MTOHISTORY", pROJIDParameter)
    End Function

    Public Overridable Function SP_UPDATEBQSTATUSFROMPO(pO_NO As String, fLAG As Nullable(Of Integer)) As Integer
        Dim pO_NOParameter As ObjectParameter = If(pO_NO IsNot Nothing, New ObjectParameter("PO_NO", pO_NO), New ObjectParameter("PO_NO", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG.HasValue, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_UPDATEBQSTATUSFROMPO", pO_NOParameter, fLAGParameter)
    End Function

    Public Overridable Function USP_UPDATE_NEWS(rEFID As String) As Integer
        Dim rEFIDParameter As ObjectParameter = If(rEFID IsNot Nothing, New ObjectParameter("REFID", rEFID), New ObjectParameter("REFID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_UPDATE_NEWS", rEFIDParameter)
    End Function

    Public Overridable Function SP_UPDATECONTRACTPARENT(dOC_ID As String) As Integer
        Dim dOC_IDParameter As ObjectParameter = If(dOC_ID IsNot Nothing, New ObjectParameter("DOC_ID", dOC_ID), New ObjectParameter("DOC_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_UPDATECONTRACTPARENT", dOC_IDParameter)
    End Function

    Public Overridable Function SP_UPDATECONTRACTREVISE(dOC_ID As String, dOC_ID_REVISE As String) As Integer
        Dim dOC_IDParameter As ObjectParameter = If(dOC_ID IsNot Nothing, New ObjectParameter("DOC_ID", dOC_ID), New ObjectParameter("DOC_ID", GetType(String)))

        Dim dOC_ID_REVISEParameter As ObjectParameter = If(dOC_ID_REVISE IsNot Nothing, New ObjectParameter("DOC_ID_REVISE", dOC_ID_REVISE), New ObjectParameter("DOC_ID_REVISE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_UPDATECONTRACTREVISE", dOC_IDParameter, dOC_ID_REVISEParameter)
    End Function

    Public Overridable Function USP_MTO_BALANCE(pROJID As String, dISCIPCODE As String) As ObjectResult(Of USP_MTO_BALANCE_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim dISCIPCODEParameter As ObjectParameter = If(dISCIPCODE IsNot Nothing, New ObjectParameter("DISCIPCODE", dISCIPCODE), New ObjectParameter("DISCIPCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MTO_BALANCE_Result)("USP_MTO_BALANCE", pROJIDParameter, dISCIPCODEParameter)
    End Function

    Public Overridable Function USP_VENDOR_IMPORT_MASTER() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_VENDOR_IMPORT_MASTER")
    End Function

    Public Overridable Function SP_DISPLAYSPOOLREADYNESS(pROJECTID As String, fLAG As String, sUBCONT As String) As ObjectResult(Of SP_DISPLAYSPOOLREADYNESS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG IsNot Nothing, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYSPOOLREADYNESS_Result)("SP_DISPLAYSPOOLREADYNESS", pROJECTIDParameter, fLAGParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_DISPLAYSPOOLREADYNESS1(pROJECTID As String, fLAG As String, sUBCONT As String) As ObjectResult(Of SP_DISPLAYSPOOLREADYNESS1_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG IsNot Nothing, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYSPOOLREADYNESS1_Result)("SP_DISPLAYSPOOLREADYNESS1", pROJECTIDParameter, fLAGParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_UPDATEBUDGETREVISE(bQ_ID As String) As Integer
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_UPDATEBUDGETREVISE", bQ_IDParameter)
    End Function

    Public Overridable Function gethitcounterdaily() As ObjectResult(Of Nullable(Of Integer))
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("gethitcounterdaily")
    End Function

    Public Overridable Function gethitcountermonthly() As ObjectResult(Of Nullable(Of Integer))
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("gethitcountermonthly")
    End Function

    Public Overridable Function gethitcountertotal() As ObjectResult(Of Nullable(Of Integer))
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("gethitcountertotal")
    End Function

    Public Overridable Function RELEASEDBQ_FILE(bQ_ID As String) As ObjectResult(Of RELEASEDBQ_FILE_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of RELEASEDBQ_FILE_Result)("RELEASEDBQ_FILE", bQ_IDParameter)
    End Function

    Public Overridable Function SELECT_INQUIRY(pROJECT_ID As String) As ObjectResult(Of SELECT_INQUIRY_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SELECT_INQUIRY_Result)("SELECT_INQUIRY", pROJECT_IDParameter)
    End Function

    Public Overridable Function SELECT_INQUIRY_TEST(pROJECT_ID As String) As ObjectResult(Of SELECT_INQUIRY_TEST_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SELECT_INQUIRY_TEST_Result)("SELECT_INQUIRY_TEST", pROJECT_IDParameter)
    End Function

    Public Overridable Function SELECT_INQUIRYPLAN(pROJECT_ID As String) As ObjectResult(Of SELECT_INQUIRYPLAN_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SELECT_INQUIRYPLAN_Result)("SELECT_INQUIRYPLAN", pROJECT_IDParameter)
    End Function

    Public Overridable Function SELECT_INQUIRYPLANBUDGET(pROJECT_ID As String) As ObjectResult(Of SELECT_INQUIRYPLANBUDGET_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SELECT_INQUIRYPLANBUDGET_Result)("SELECT_INQUIRYPLANBUDGET", pROJECT_IDParameter)
    End Function

    Public Overridable Function SELECT_MTO(pROJID As String, dISCIPCODE As String) As Integer
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim dISCIPCODEParameter As ObjectParameter = If(dISCIPCODE IsNot Nothing, New ObjectParameter("DISCIPCODE", dISCIPCODE), New ObjectParameter("DISCIPCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SELECT_MTO", pROJIDParameter, dISCIPCODEParameter)
    End Function

    Public Overridable Function sp_alterdiagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function SP_AutonumberGenerate(rEQ_ID As String) As Integer
        Dim rEQ_IDParameter As ObjectParameter = If(rEQ_ID IsNot Nothing, New ObjectParameter("REQ_ID", rEQ_ID), New ObjectParameter("REQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_AutonumberGenerate", rEQ_IDParameter)
    End Function

    Public Overridable Function SP_CHECKINGMATERIAL(pROJECTID As String, iDENTCODE As String) As ObjectResult(Of SP_CHECKINGMATERIAL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim iDENTCODEParameter As ObjectParameter = If(iDENTCODE IsNot Nothing, New ObjectParameter("IDENTCODE", iDENTCODE), New ObjectParameter("IDENTCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CHECKINGMATERIAL_Result)("SP_CHECKINGMATERIAL", pROJECTIDParameter, iDENTCODEParameter)
    End Function

    Public Overridable Function SP_CHECKINGMATERIALRESERVED_ALL(pROJECTID As String, iDENTCODE As String) As ObjectResult(Of SP_CHECKINGMATERIALRESERVED_ALL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim iDENTCODEParameter As ObjectParameter = If(iDENTCODE IsNot Nothing, New ObjectParameter("IDENTCODE", iDENTCODE), New ObjectParameter("IDENTCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CHECKINGMATERIALRESERVED_ALL_Result)("SP_CHECKINGMATERIALRESERVED_ALL", pROJECTIDParameter, iDENTCODEParameter)
    End Function

    Public Overridable Function SP_CHECKINGOVERREQUEST(pROJID As String, fLAG As String) As ObjectResult(Of SP_CHECKINGOVERREQUEST_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG IsNot Nothing, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_CHECKINGOVERREQUEST_Result)("SP_CHECKINGOVERREQUEST", pROJIDParameter, fLAGParameter)
    End Function

    Public Overridable Function SP_CLEARING_DATA_WORKFRONT(pROJECTID As String) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_CLEARING_DATA_WORKFRONT", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_COUNTERBOKINGNUMBER(pROJECTID As String, rEQID As String) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQIDParameter As ObjectParameter = If(rEQID IsNot Nothing, New ObjectParameter("REQID", rEQID), New ObjectParameter("REQID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_COUNTERBOKINGNUMBER", pROJECTIDParameter, rEQIDParameter)
    End Function

    Public Overridable Function SP_COUNTERBOKINGNUMBER_NONSPOOL(pROJECTID As String, rEQID As String) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQIDParameter As ObjectParameter = If(rEQID IsNot Nothing, New ObjectParameter("REQID", rEQID), New ObjectParameter("REQID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_COUNTERBOKINGNUMBER_NONSPOOL", pROJECTIDParameter, rEQIDParameter)
    End Function

    Public Overridable Function sp_creatediagram(diagramname As String, owner_id As Nullable(Of Integer), version As Nullable(Of Integer), definition As Byte()) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim versionParameter As ObjectParameter = If(version.HasValue, New ObjectParameter("version", version), New ObjectParameter("version", GetType(Integer)))

        Dim definitionParameter As ObjectParameter = If(definition IsNot Nothing, New ObjectParameter("definition", definition), New ObjectParameter("definition", GetType(Byte())))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter)
    End Function

    Public Overridable Function SP_DASHBOARD() As ObjectResult(Of SP_DASHBOARD_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DASHBOARD_Result)("SP_DASHBOARD")
    End Function

    Public Overridable Function SP_DETAIL_MATERIAL_TRACKING(pROJID As String, iDENTCODE As String, fLAG As String) As ObjectResult(Of SP_DETAIL_MATERIAL_TRACKING_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim iDENTCODEParameter As ObjectParameter = If(iDENTCODE IsNot Nothing, New ObjectParameter("IDENTCODE", iDENTCODE), New ObjectParameter("IDENTCODE", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG IsNot Nothing, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DETAIL_MATERIAL_TRACKING_Result)("SP_DETAIL_MATERIAL_TRACKING", pROJIDParameter, iDENTCODEParameter, fLAGParameter)
    End Function

    Public Overridable Function SP_DETAILGRAFIKFIELDINSTALLATION(pROJECTID As String, sUBCONT As String, mATERIAL As String) As ObjectResult(Of SP_DETAILGRAFIKFIELDINSTALLATION_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Dim mATERIALParameter As ObjectParameter = If(mATERIAL IsNot Nothing, New ObjectParameter("MATERIAL", mATERIAL), New ObjectParameter("MATERIAL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DETAILGRAFIKFIELDINSTALLATION_Result)("SP_DETAILGRAFIKFIELDINSTALLATION", pROJECTIDParameter, sUBCONTParameter, mATERIALParameter)
    End Function

    Public Overridable Function SP_DETAILGRAFIKWORKFRONT(pROJECTID As String, sUBCONT As String, mATERIAL As String) As ObjectResult(Of SP_DETAILGRAFIKWORKFRONT_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Dim mATERIALParameter As ObjectParameter = If(mATERIAL IsNot Nothing, New ObjectParameter("MATERIAL", mATERIAL), New ObjectParameter("MATERIAL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DETAILGRAFIKWORKFRONT_Result)("SP_DETAILGRAFIKWORKFRONT", pROJECTIDParameter, sUBCONTParameter, mATERIALParameter)
    End Function

    Public Overridable Function SP_DISPLAYDASHBOARD(pROJECTID As String) As ObjectResult(Of SP_DISPLAYDASHBOARD_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYDASHBOARD_Result)("SP_DISPLAYDASHBOARD", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_DISPLAYFIELDREADYNESS(pROJECTID As String) As ObjectResult(Of SP_DISPLAYFIELDREADYNESS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYFIELDREADYNESS_Result)("SP_DISPLAYFIELDREADYNESS", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_DISPLAYGRAFIKFIELDINSTALLATION(pROJECTID As String, sUBCONT As String, mATERIAL As String) As ObjectResult(Of SP_DISPLAYGRAFIKFIELDINSTALLATION_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Dim mATERIALParameter As ObjectParameter = If(mATERIAL IsNot Nothing, New ObjectParameter("MATERIAL", mATERIAL), New ObjectParameter("MATERIAL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYGRAFIKFIELDINSTALLATION_Result)("SP_DISPLAYGRAFIKFIELDINSTALLATION", pROJECTIDParameter, sUBCONTParameter, mATERIALParameter)
    End Function

    Public Overridable Function SP_DISPLAYGRAFIKWORKFRONT(pROJECTID As String, sUBCONT As String, mATERIAL As String) As ObjectResult(Of SP_DISPLAYGRAFIKWORKFRONT_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Dim mATERIALParameter As ObjectParameter = If(mATERIAL IsNot Nothing, New ObjectParameter("MATERIAL", mATERIAL), New ObjectParameter("MATERIAL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYGRAFIKWORKFRONT_Result)("SP_DISPLAYGRAFIKWORKFRONT", pROJECTIDParameter, sUBCONTParameter, mATERIALParameter)
    End Function

    Public Overridable Function SP_DISPLAYGRAFIKWORKFRONT_OLD(pROJECTID As String, sUBCONT As String, mATERIAL As String) As ObjectResult(Of SP_DISPLAYGRAFIKWORKFRONT_OLD_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Dim mATERIALParameter As ObjectParameter = If(mATERIAL IsNot Nothing, New ObjectParameter("MATERIAL", mATERIAL), New ObjectParameter("MATERIAL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYGRAFIKWORKFRONT_OLD_Result)("SP_DISPLAYGRAFIKWORKFRONT_OLD", pROJECTIDParameter, sUBCONTParameter, mATERIALParameter)
    End Function

    Public Overridable Function SP_DISPLAYSPOOLDETAIL(sPOOL_ID As String, pROJECTID As String) As ObjectResult(Of SP_DISPLAYSPOOLDETAIL_Result)
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYSPOOLDETAIL_Result)("SP_DISPLAYSPOOLDETAIL", sPOOL_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function SP_DISPLAYSPOOLERECTION(pROJECTID As String) As ObjectResult(Of SP_DISPLAYSPOOLERECTION_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYSPOOLERECTION_Result)("SP_DISPLAYSPOOLERECTION", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_DISPLAYSPOOLREADYNESS2(pROJECTID As String, fLAG As String, sUBCONT As String) As ObjectResult(Of SP_DISPLAYSPOOLREADYNESS2_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG IsNot Nothing, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYSPOOLREADYNESS2_Result)("SP_DISPLAYSPOOLREADYNESS2", pROJECTIDParameter, fLAGParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_DISPLAYSPOOLRESERVED(pROJECTID As String) As ObjectResult(Of SP_DISPLAYSPOOLRESERVED_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYSPOOLRESERVED_Result)("SP_DISPLAYSPOOLRESERVED", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_DISPLAYTESTPACKAGE(projId As String) As ObjectResult(Of SP_DISPLAYTESTPACKAGE_Result)
        Dim projIdParameter As ObjectParameter = If(projId IsNot Nothing, New ObjectParameter("ProjId", projId), New ObjectParameter("ProjId", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYTESTPACKAGE_Result)("SP_DISPLAYTESTPACKAGE", projIdParameter)
    End Function

    Public Overridable Function SP_DISPLAYTESTPACKAGE_DETAIL(projId As String, refId As String) As ObjectResult(Of SP_DISPLAYTESTPACKAGE_DETAIL_Result)
        Dim projIdParameter As ObjectParameter = If(projId IsNot Nothing, New ObjectParameter("ProjId", projId), New ObjectParameter("ProjId", GetType(String)))

        Dim refIdParameter As ObjectParameter = If(refId IsNot Nothing, New ObjectParameter("RefId", refId), New ObjectParameter("RefId", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYTESTPACKAGE_DETAIL_Result)("SP_DISPLAYTESTPACKAGE_DETAIL", projIdParameter, refIdParameter)
    End Function

    Public Overridable Function SP_DISPLAYTESTPACKAGE_DETAILSTAGE(projId As String, dataId As String, stage As Nullable(Of Integer)) As ObjectResult(Of SP_DISPLAYTESTPACKAGE_DETAILSTAGE_Result)
        Dim projIdParameter As ObjectParameter = If(projId IsNot Nothing, New ObjectParameter("ProjId", projId), New ObjectParameter("ProjId", GetType(String)))

        Dim dataIdParameter As ObjectParameter = If(dataId IsNot Nothing, New ObjectParameter("DataId", dataId), New ObjectParameter("DataId", GetType(String)))

        Dim stageParameter As ObjectParameter = If(stage.HasValue, New ObjectParameter("Stage", stage), New ObjectParameter("Stage", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYTESTPACKAGE_DETAILSTAGE_Result)("SP_DISPLAYTESTPACKAGE_DETAILSTAGE", projIdParameter, dataIdParameter, stageParameter)
    End Function

    Public Overridable Function SP_DISPLAYUPLOADTESTPACKAGE(projId As String) As ObjectResult(Of SP_DISPLAYUPLOADTESTPACKAGE_Result)
        Dim projIdParameter As ObjectParameter = If(projId IsNot Nothing, New ObjectParameter("ProjId", projId), New ObjectParameter("ProjId", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_DISPLAYUPLOADTESTPACKAGE_Result)("SP_DISPLAYUPLOADTESTPACKAGE", projIdParameter)
    End Function

    Public Overridable Function sp_dropdiagram(diagramname As String, owner_id As Nullable(Of Integer)) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function SP_EXCLUDE_SPOOL(sPOOL_ID As String, pROJECTID As String) As Integer
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_EXCLUDE_SPOOL", sPOOL_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function SP_EXPEDITING_STATUS(pROJECT_CODE As String) As ObjectResult(Of SP_EXPEDITING_STATUS_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_EXPEDITING_STATUS_Result)("SP_EXPEDITING_STATUS", pROJECT_CODEParameter)
    End Function

    Public Overridable Function SP_GRAFIKMATERIAL(pROJECTID As String) As ObjectResult(Of String)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("SP_GRAFIKMATERIAL", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_GRAFIKSUBCONT(pROJECTID As String) As ObjectResult(Of SP_GRAFIKSUBCONT_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_GRAFIKSUBCONT_Result)("SP_GRAFIKSUBCONT", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_GRAFIKWORKFRONT(pROJECTID As String, sUBCONT As String, mATERIAL As String) As ObjectResult(Of SP_GRAFIKWORKFRONT_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Dim mATERIALParameter As ObjectParameter = If(mATERIAL IsNot Nothing, New ObjectParameter("MATERIAL", mATERIAL), New ObjectParameter("MATERIAL", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_GRAFIKWORKFRONT_Result)("SP_GRAFIKWORKFRONT", pROJECTIDParameter, sUBCONTParameter, mATERIALParameter)
    End Function

    Public Overridable Function sp_helpdiagramdefinition(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagramdefinition_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagramdefinition_Result)("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function sp_helpdiagrams(diagramname As String, owner_id As Nullable(Of Integer)) As ObjectResult(Of sp_helpdiagrams_Result)
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of sp_helpdiagrams_Result)("sp_helpdiagrams", diagramnameParameter, owner_idParameter)
    End Function

    Public Overridable Function SP_IDENTIFICATION(bQ_ID As String, pROJECTCODE As String) As ObjectResult(Of SP_IDENTIFICATION_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Dim pROJECTCODEParameter As ObjectParameter = If(pROJECTCODE IsNot Nothing, New ObjectParameter("PROJECTCODE", pROJECTCODE), New ObjectParameter("PROJECTCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_IDENTIFICATION_Result)("SP_IDENTIFICATION", bQ_IDParameter, pROJECTCODEParameter)
    End Function

    Public Overridable Function SP_INCLUDE_NONSPOOL(pROJECTID As String, iSO_NO As String, pROGRESS As Nullable(Of Decimal)) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim iSO_NOParameter As ObjectParameter = If(iSO_NO IsNot Nothing, New ObjectParameter("ISO_NO", iSO_NO), New ObjectParameter("ISO_NO", GetType(String)))

        Dim pROGRESSParameter As ObjectParameter = If(pROGRESS.HasValue, New ObjectParameter("PROGRESS", pROGRESS), New ObjectParameter("PROGRESS", GetType(Decimal)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INCLUDE_NONSPOOL", pROJECTIDParameter, iSO_NOParameter, pROGRESSParameter)
    End Function

    Public Overridable Function SP_INCLUDE_SPOOL(pROJECTID As String, sPOOL_ID As String, pROGRESS As Nullable(Of Decimal)) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROGRESSParameter As ObjectParameter = If(pROGRESS.HasValue, New ObjectParameter("PROGRESS", pROGRESS), New ObjectParameter("PROGRESS", GetType(Decimal)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INCLUDE_SPOOL", pROJECTIDParameter, sPOOL_IDParameter, pROGRESSParameter)
    End Function

    Public Overridable Function SP_INCLUDE_SPOOL_REV(pROJECTID As String, sPOOL_ID As String, iDENTCODE As String, rEV As Nullable(Of Integer)) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim iDENTCODEParameter As ObjectParameter = If(iDENTCODE IsNot Nothing, New ObjectParameter("IDENTCODE", iDENTCODE), New ObjectParameter("IDENTCODE", GetType(String)))

        Dim rEVParameter As ObjectParameter = If(rEV.HasValue, New ObjectParameter("REV", rEV), New ObjectParameter("REV", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INCLUDE_SPOOL_REV", pROJECTIDParameter, sPOOL_IDParameter, iDENTCODEParameter, rEVParameter)
    End Function

    Public Overridable Function SP_INQUIRY_VENDWIN(iNQUIRY_ID As String) As ObjectResult(Of SP_INQUIRY_VENDWIN_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_INQUIRY_VENDWIN_Result)("SP_INQUIRY_VENDWIN", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function SP_INSERT_MISREQUEST(dISCIPLINE As String, oRIGINATOR As String, pROJECTID As String, rEQID As String, sPOOLID As String) As Integer
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim oRIGINATORParameter As ObjectParameter = If(oRIGINATOR IsNot Nothing, New ObjectParameter("ORIGINATOR", oRIGINATOR), New ObjectParameter("ORIGINATOR", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQIDParameter As ObjectParameter = If(rEQID IsNot Nothing, New ObjectParameter("REQID", rEQID), New ObjectParameter("REQID", GetType(String)))

        Dim sPOOLIDParameter As ObjectParameter = If(sPOOLID IsNot Nothing, New ObjectParameter("SPOOLID", sPOOLID), New ObjectParameter("SPOOLID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INSERT_MISREQUEST", dISCIPLINEParameter, oRIGINATORParameter, pROJECTIDParameter, rEQIDParameter, sPOOLIDParameter)
    End Function

    Public Overridable Function SP_INSERT_MISREQUEST_OLD(dISCIPLINE As String, oRIGINATOR As String, pROJECTID As String, rEQID As String) As Integer
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim oRIGINATORParameter As ObjectParameter = If(oRIGINATOR IsNot Nothing, New ObjectParameter("ORIGINATOR", oRIGINATOR), New ObjectParameter("ORIGINATOR", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQIDParameter As ObjectParameter = If(rEQID IsNot Nothing, New ObjectParameter("REQID", rEQID), New ObjectParameter("REQID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INSERT_MISREQUEST_OLD", dISCIPLINEParameter, oRIGINATORParameter, pROJECTIDParameter, rEQIDParameter)
    End Function

    Public Overridable Function SP_INSERT_MISREQUESTNONSPOOL(dISCIPLINE As String, oRIGINATOR As String, pROJECTID As String, rEQID As String, iSONO As String) As Integer
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim oRIGINATORParameter As ObjectParameter = If(oRIGINATOR IsNot Nothing, New ObjectParameter("ORIGINATOR", oRIGINATOR), New ObjectParameter("ORIGINATOR", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQIDParameter As ObjectParameter = If(rEQID IsNot Nothing, New ObjectParameter("REQID", rEQID), New ObjectParameter("REQID", GetType(String)))

        Dim iSONOParameter As ObjectParameter = If(iSONO IsNot Nothing, New ObjectParameter("ISONO", iSONO), New ObjectParameter("ISONO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INSERT_MISREQUESTNONSPOOL", dISCIPLINEParameter, oRIGINATORParameter, pROJECTIDParameter, rEQIDParameter, iSONOParameter)
    End Function

    Public Overridable Function SP_INSERTSCHEDULETEMPLATE(tEMPLATE_NAME As String, tEMPLATE_DESC As String, pROJECT_ID As String) As Integer
        Dim tEMPLATE_NAMEParameter As ObjectParameter = If(tEMPLATE_NAME IsNot Nothing, New ObjectParameter("TEMPLATE_NAME", tEMPLATE_NAME), New ObjectParameter("TEMPLATE_NAME", GetType(String)))

        Dim tEMPLATE_DESCParameter As ObjectParameter = If(tEMPLATE_DESC IsNot Nothing, New ObjectParameter("TEMPLATE_DESC", tEMPLATE_DESC), New ObjectParameter("TEMPLATE_DESC", GetType(String)))

        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_INSERTSCHEDULETEMPLATE", tEMPLATE_NAMEParameter, tEMPLATE_DESCParameter, pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_LISTRSR(pROJECT_CODE As String, pO_ID As String) As ObjectResult(Of SP_LISTRSR_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim pO_IDParameter As ObjectParameter = If(pO_ID IsNot Nothing, New ObjectParameter("PO_ID", pO_ID), New ObjectParameter("PO_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_LISTRSR_Result)("SP_LISTRSR", pROJECT_CODEParameter, pO_IDParameter)
    End Function

    Public Overridable Function SP_LISTSHIPPER() As ObjectResult(Of SP_LISTSHIPPER_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_LISTSHIPPER_Result)("SP_LISTSHIPPER")
    End Function

    Public Overridable Function SP_MATERIAL_BALANCE(pROJECT_CODE As String, pO_NO As String) As ObjectResult(Of SP_MATERIAL_BALANCE_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim pO_NOParameter As ObjectParameter = If(pO_NO IsNot Nothing, New ObjectParameter("PO_NO", pO_NO), New ObjectParameter("PO_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_MATERIAL_BALANCE_Result)("SP_MATERIAL_BALANCE", pROJECT_CODEParameter, pO_NOParameter)
    End Function

    Public Overridable Function SP_MATERIAL_TRACKING(pROJID As String, iDENTCODE As String) As ObjectResult(Of SP_MATERIAL_TRACKING_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim iDENTCODEParameter As ObjectParameter = If(iDENTCODE IsNot Nothing, New ObjectParameter("IDENTCODE", iDENTCODE), New ObjectParameter("IDENTCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_MATERIAL_TRACKING_Result)("SP_MATERIAL_TRACKING", pROJIDParameter, iDENTCODEParameter)
    End Function

    Public Overridable Function SP_NEWDISPLAYSPOOLREADYNESS(pROJECTID As String, fLAG As String, sUBCONT As String) As ObjectResult(Of SP_NEWDISPLAYSPOOLREADYNESS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim fLAGParameter As ObjectParameter = If(fLAG IsNot Nothing, New ObjectParameter("FLAG", fLAG), New ObjectParameter("FLAG", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_NEWDISPLAYSPOOLREADYNESS_Result)("SP_NEWDISPLAYSPOOLREADYNESS", pROJECTIDParameter, fLAGParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_NONSPOOLRESERVED(pROJECTID As String) As ObjectResult(Of SP_NONSPOOLRESERVED_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_NONSPOOLRESERVED_Result)("SP_NONSPOOLRESERVED", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_PURCHASEORDERITEM_SUMARRY(pO_ID As String) As ObjectResult(Of SP_PURCHASEORDERITEM_SUMARRY_Result)
        Dim pO_IDParameter As ObjectParameter = If(pO_ID IsNot Nothing, New ObjectParameter("PO_ID", pO_ID), New ObjectParameter("PO_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_PURCHASEORDERITEM_SUMARRY_Result)("SP_PURCHASEORDERITEM_SUMARRY", pO_IDParameter)
    End Function

    Public Overridable Function SP_QTY_INQMAT(iNQUIRY_ID As String, iDENTITY_CODE As String) As ObjectResult(Of SP_QTY_INQMAT_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Dim iDENTITY_CODEParameter As ObjectParameter = If(iDENTITY_CODE IsNot Nothing, New ObjectParameter("IDENTITY_CODE", iDENTITY_CODE), New ObjectParameter("IDENTITY_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_QTY_INQMAT_Result)("SP_QTY_INQMAT", iNQUIRY_IDParameter, iDENTITY_CODEParameter)
    End Function

    Public Overridable Function SP_REMINDER_VENDOR_MILESTONE() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_REMINDER_VENDOR_MILESTONE")
    End Function

    Public Overridable Function sp_renamediagram(diagramname As String, owner_id As Nullable(Of Integer), new_diagramname As String) As Integer
        Dim diagramnameParameter As ObjectParameter = If(diagramname IsNot Nothing, New ObjectParameter("diagramname", diagramname), New ObjectParameter("diagramname", GetType(String)))

        Dim owner_idParameter As ObjectParameter = If(owner_id.HasValue, New ObjectParameter("owner_id", owner_id), New ObjectParameter("owner_id", GetType(Integer)))

        Dim new_diagramnameParameter As ObjectParameter = If(new_diagramname IsNot Nothing, New ObjectParameter("new_diagramname", new_diagramname), New ObjectParameter("new_diagramname", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter)
    End Function

    Public Overridable Function SP_REPORT_MIS_HEADER(pROJECTID As String, rEQ_NO As String) As ObjectResult(Of SP_REPORT_MIS_HEADER_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQ_NOParameter As ObjectParameter = If(rEQ_NO IsNot Nothing, New ObjectParameter("REQ_NO", rEQ_NO), New ObjectParameter("REQ_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_REPORT_MIS_HEADER_Result)("SP_REPORT_MIS_HEADER", pROJECTIDParameter, rEQ_NOParameter)
    End Function

    Public Overridable Function SP_REPORT_SHIPPING(sINO As String, pROJID As String) As ObjectResult(Of SP_REPORT_SHIPPING_Result)
        Dim sINOParameter As ObjectParameter = If(sINO IsNot Nothing, New ObjectParameter("SINO", sINO), New ObjectParameter("SINO", GetType(String)))

        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_REPORT_SHIPPING_Result)("SP_REPORT_SHIPPING", sINOParameter, pROJIDParameter)
    End Function

    Public Overridable Function SP_RESERVED_SPOOL(pROJECTID As String, sPOOL_ID As String) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RESERVED_SPOOL", pROJECTIDParameter, sPOOL_IDParameter)
    End Function

    Public Overridable Function SP_RESERVEDBOOKING_SPOOL(pROJECTID As String, sPOOL_ID As String) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RESERVEDBOOKING_SPOOL", pROJECTIDParameter, sPOOL_IDParameter)
    End Function

    Public Overridable Function SP_RESULT_TRACKING(projid As String, identCode As String, keyword As String) As ObjectResult(Of SP_RESULT_TRACKING_Result)
        Dim projidParameter As ObjectParameter = If(projid IsNot Nothing, New ObjectParameter("Projid", projid), New ObjectParameter("Projid", GetType(String)))

        Dim identCodeParameter As ObjectParameter = If(identCode IsNot Nothing, New ObjectParameter("IdentCode", identCode), New ObjectParameter("IdentCode", GetType(String)))

        Dim keywordParameter As ObjectParameter = If(keyword IsNot Nothing, New ObjectParameter("Keyword", keyword), New ObjectParameter("Keyword", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_RESULT_TRACKING_Result)("SP_RESULT_TRACKING", projidParameter, identCodeParameter, keywordParameter)
    End Function

    Public Overridable Function SP_RETURN_SPOOL_REV(pROJECTID As String, sPOOL_ID As String, iDENTCODE As String, rEV As Nullable(Of Integer)) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim iDENTCODEParameter As ObjectParameter = If(iDENTCODE IsNot Nothing, New ObjectParameter("IDENTCODE", iDENTCODE), New ObjectParameter("IDENTCODE", GetType(String)))

        Dim rEVParameter As ObjectParameter = If(rEV.HasValue, New ObjectParameter("REV", rEV), New ObjectParameter("REV", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_RETURN_SPOOL_REV", pROJECTIDParameter, sPOOL_IDParameter, iDENTCODEParameter, rEVParameter)
    End Function

    Public Overridable Function SP_SELECDISCIPLINEWF(pROJECT_ID As String) As ObjectResult(Of SP_SELECDISCIPLINEWF_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECDISCIPLINEWF_Result)("SP_SELECDISCIPLINEWF", pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SELECT_AWARDEDVENDOR(pROJECT_ID As String) As ObjectResult(Of SP_SELECT_AWARDEDVENDOR_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_AWARDEDVENDOR_Result)("SP_SELECT_AWARDEDVENDOR", pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SELECT_DATA_WORKFRONT(pROJECTID As String) As ObjectResult(Of SP_SELECT_DATA_WORKFRONT_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_DATA_WORKFRONT_Result)("SP_SELECT_DATA_WORKFRONT", pROJECTIDParameter)
    End Function

    Public Overridable Function SP_SELECT_INQUIRY_VENDWIN(vENDOR_CODE As String, pROJECT_ID As String) As ObjectResult(Of SP_SELECT_INQUIRY_VENDWIN_Result)
        Dim vENDOR_CODEParameter As ObjectParameter = If(vENDOR_CODE IsNot Nothing, New ObjectParameter("VENDOR_CODE", vENDOR_CODE), New ObjectParameter("VENDOR_CODE", GetType(String)))

        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_INQUIRY_VENDWIN_Result)("SP_SELECT_INQUIRY_VENDWIN", vENDOR_CODEParameter, pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SELECT_INQUIRYVENDOR(iNQUIRY_ID As String) As ObjectResult(Of SP_SELECT_INQUIRYVENDOR_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_INQUIRYVENDOR_Result)("SP_SELECT_INQUIRYVENDOR", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function SP_SELECT_MIS(pROJECTID As String, rEQ_NO As String) As ObjectResult(Of SP_SELECT_MIS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQ_NOParameter As ObjectParameter = If(rEQ_NO IsNot Nothing, New ObjectParameter("REQ_NO", rEQ_NO), New ObjectParameter("REQ_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_MIS_Result)("SP_SELECT_MIS", pROJECTIDParameter, rEQ_NOParameter)
    End Function

    Public Overridable Function SP_SELECT_MIS_HEADER(pROJECTID As String, rEQ_NO As String) As ObjectResult(Of SP_SELECT_MIS_HEADER_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQ_NOParameter As ObjectParameter = If(rEQ_NO IsNot Nothing, New ObjectParameter("REQ_NO", rEQ_NO), New ObjectParameter("REQ_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_MIS_HEADER_Result)("SP_SELECT_MIS_HEADER", pROJECTIDParameter, rEQ_NOParameter)
    End Function

    Public Overridable Function SP_SELECT_MIS_MATERIAL(rEQ_NO As String) As ObjectResult(Of SP_SELECT_MIS_MATERIAL_Result)
        Dim rEQ_NOParameter As ObjectParameter = If(rEQ_NO IsNot Nothing, New ObjectParameter("REQ_NO", rEQ_NO), New ObjectParameter("REQ_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_MIS_MATERIAL_Result)("SP_SELECT_MIS_MATERIAL", rEQ_NOParameter)
    End Function

    Public Overridable Function SP_SELECT_MIS_NS(pROJECTID As String, rEQ_NO As String) As ObjectResult(Of SP_SELECT_MIS_NS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim rEQ_NOParameter As ObjectParameter = If(rEQ_NO IsNot Nothing, New ObjectParameter("REQ_NO", rEQ_NO), New ObjectParameter("REQ_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_MIS_NS_Result)("SP_SELECT_MIS_NS", pROJECTIDParameter, rEQ_NOParameter)
    End Function

    Public Overridable Function SP_SELECT_REQ_MIS(pROJECTID As String, dISCIPLINE As String, sTATUS As String) As ObjectResult(Of SP_SELECT_REQ_MIS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim sTATUSParameter As ObjectParameter = If(sTATUS IsNot Nothing, New ObjectParameter("STATUS", sTATUS), New ObjectParameter("STATUS", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_REQ_MIS_Result)("SP_SELECT_REQ_MIS", pROJECTIDParameter, dISCIPLINEParameter, sTATUSParameter)
    End Function

    Public Overridable Function SP_SELECT_REQ_MIS_NS(pROJECTID As String, dISCIPLINE As String, sTATUS As String) As ObjectResult(Of SP_SELECT_REQ_MIS_NS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim sTATUSParameter As ObjectParameter = If(sTATUS IsNot Nothing, New ObjectParameter("STATUS", sTATUS), New ObjectParameter("STATUS", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_REQ_MIS_NS_Result)("SP_SELECT_REQ_MIS_NS", pROJECTIDParameter, dISCIPLINEParameter, sTATUSParameter)
    End Function

    Public Overridable Function SP_SELECT_RSR(pROJECT_CODE As String) As ObjectResult(Of SP_SELECT_RSR_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECT_RSR_Result)("SP_SELECT_RSR", pROJECT_CODEParameter)
    End Function

    Public Overridable Function SP_SELECTCATEGORYINQUIRY() As ObjectResult(Of SP_SELECTCATEGORYINQUIRY_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTCATEGORYINQUIRY_Result)("SP_SELECTCATEGORYINQUIRY")
    End Function

    Public Overridable Function SP_SELECTCONTRACTDOCUMENT(pROJECT_ID As String) As ObjectResult(Of SP_SELECTCONTRACTDOCUMENT_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTCONTRACTDOCUMENT_Result)("SP_SELECTCONTRACTDOCUMENT", pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SELECTCONTRACTHISTORY(dOC_NO As String) As ObjectResult(Of SP_SELECTCONTRACTHISTORY_Result)
        Dim dOC_NOParameter As ObjectParameter = If(dOC_NO IsNot Nothing, New ObjectParameter("DOC_NO", dOC_NO), New ObjectParameter("DOC_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTCONTRACTHISTORY_Result)("SP_SELECTCONTRACTHISTORY", dOC_NOParameter)
    End Function

    Public Overridable Function SP_SELECTCONTRACTLIST(pROJECT_ID As String, rOLE_CODE As String) As ObjectResult(Of SP_SELECTCONTRACTLIST_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Dim rOLE_CODEParameter As ObjectParameter = If(rOLE_CODE IsNot Nothing, New ObjectParameter("ROLE_CODE", rOLE_CODE), New ObjectParameter("ROLE_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTCONTRACTLIST_Result)("SP_SELECTCONTRACTLIST", pROJECT_IDParameter, rOLE_CODEParameter)
    End Function

    Public Overridable Function SP_SELECTCONTRACTPROJECT(pROJECT_CODE2 As String) As ObjectResult(Of SP_SELECTCONTRACTPROJECT_Result)
        Dim pROJECT_CODE2Parameter As ObjectParameter = If(pROJECT_CODE2 IsNot Nothing, New ObjectParameter("PROJECT_CODE2", pROJECT_CODE2), New ObjectParameter("PROJECT_CODE2", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTCONTRACTPROJECT_Result)("SP_SELECTCONTRACTPROJECT", pROJECT_CODE2Parameter)
    End Function

    Public Overridable Function SP_SELECTEMPLATE(pROJECT_ID As String) As ObjectResult(Of SP_SELECTEMPLATE_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTEMPLATE_Result)("SP_SELECTEMPLATE", pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SELECTEMPLATEACTIVITY(tEMPLATE_ID As String) As ObjectResult(Of SP_SELECTEMPLATEACTIVITY_Result)
        Dim tEMPLATE_IDParameter As ObjectParameter = If(tEMPLATE_ID IsNot Nothing, New ObjectParameter("TEMPLATE_ID", tEMPLATE_ID), New ObjectParameter("TEMPLATE_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTEMPLATEACTIVITY_Result)("SP_SELECTEMPLATEACTIVITY", tEMPLATE_IDParameter)
    End Function

    Public Overridable Function SP_SELECTPROGRESSDETAIL(pROJECT_ID As String, cOVER_ID As String) As ObjectResult(Of SP_SELECTPROGRESSDETAIL_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Dim cOVER_IDParameter As ObjectParameter = If(cOVER_ID IsNot Nothing, New ObjectParameter("COVER_ID", cOVER_ID), New ObjectParameter("COVER_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTPROGRESSDETAIL_Result)("SP_SELECTPROGRESSDETAIL", pROJECT_IDParameter, cOVER_IDParameter)
    End Function

    Public Overridable Function SP_SELECTPROGRESSLIST(pROJECT_ID As String) As ObjectResult(Of SP_SELECTPROGRESSLIST_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTPROGRESSLIST_Result)("SP_SELECTPROGRESSLIST", pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SELECTSCHEDULEACTIVITY(pROJECT_ID As String) As ObjectResult(Of SP_SELECTSCHEDULEACTIVITY_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SELECTSCHEDULEACTIVITY_Result)("SP_SELECTSCHEDULEACTIVITY", pROJECT_IDParameter)
    End Function

    Public Overridable Function SP_SET_VENDOR(iNQUIRY_ID As String) As ObjectResult(Of SP_SET_VENDOR_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SET_VENDOR_Result)("SP_SET_VENDOR", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function SP_SETVENDOR(iNQUIRY_ID As String, pROJECTID As String) As ObjectResult(Of SP_SETVENDOR_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SETVENDOR_Result)("SP_SETVENDOR", iNQUIRY_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function SP_SPOOLDETAIL_TO_RESERVE(sPOOL_ID As String, pROJECTID As String) As ObjectResult(Of SP_SPOOLDETAIL_TO_RESERVE_Result)
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SPOOLDETAIL_TO_RESERVE_Result)("SP_SPOOLDETAIL_TO_RESERVE", sPOOL_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function SP_SPOOLFABRICATION_DETAIL(pROJECT_CODE As String, iSO_NO As String, sPOOL_NO As String) As ObjectResult(Of SP_SPOOLFABRICATION_DETAIL_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim iSO_NOParameter As ObjectParameter = If(iSO_NO IsNot Nothing, New ObjectParameter("ISO_NO", iSO_NO), New ObjectParameter("ISO_NO", GetType(String)))

        Dim sPOOL_NOParameter As ObjectParameter = If(sPOOL_NO IsNot Nothing, New ObjectParameter("SPOOL_NO", sPOOL_NO), New ObjectParameter("SPOOL_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_SPOOLFABRICATION_DETAIL_Result)("SP_SPOOLFABRICATION_DETAIL", pROJECT_CODEParameter, iSO_NOParameter, sPOOL_NOParameter)
    End Function

    Public Overridable Function SP_STATUSALLDOCUMENT(pROJID As String) As ObjectResult(Of SP_STATUSALLDOCUMENT_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_STATUSALLDOCUMENT_Result)("SP_STATUSALLDOCUMENT", pROJIDParameter)
    End Function

    Public Overridable Function SP_TRACKINGBY_IDENTCODE(projid As String, var1 As String) As ObjectResult(Of SP_TRACKINGBY_IDENTCODE_Result)
        Dim projidParameter As ObjectParameter = If(projid IsNot Nothing, New ObjectParameter("Projid", projid), New ObjectParameter("Projid", GetType(String)))

        Dim var1Parameter As ObjectParameter = If(var1 IsNot Nothing, New ObjectParameter("Var1", var1), New ObjectParameter("Var1", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_TRACKINGBY_IDENTCODE_Result)("SP_TRACKINGBY_IDENTCODE", projidParameter, var1Parameter)
    End Function

    Public Overridable Function SP_TRACKINGBY_KEYWORD(projid As String, var1 As String) As ObjectResult(Of SP_TRACKINGBY_KEYWORD_Result)
        Dim projidParameter As ObjectParameter = If(projid IsNot Nothing, New ObjectParameter("Projid", projid), New ObjectParameter("Projid", GetType(String)))

        Dim var1Parameter As ObjectParameter = If(var1 IsNot Nothing, New ObjectParameter("Var1", var1), New ObjectParameter("Var1", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_TRACKINGBY_KEYWORD_Result)("SP_TRACKINGBY_KEYWORD", projidParameter, var1Parameter)
    End Function

    Public Overridable Function SP_UPDATESCHEDULETEMPLATE(tEMPLATE_ID As String, tEMPLATE_NAME As String, tEMPLATE_DESC As String) As Integer
        Dim tEMPLATE_IDParameter As ObjectParameter = If(tEMPLATE_ID IsNot Nothing, New ObjectParameter("TEMPLATE_ID", tEMPLATE_ID), New ObjectParameter("TEMPLATE_ID", GetType(String)))

        Dim tEMPLATE_NAMEParameter As ObjectParameter = If(tEMPLATE_NAME IsNot Nothing, New ObjectParameter("TEMPLATE_NAME", tEMPLATE_NAME), New ObjectParameter("TEMPLATE_NAME", GetType(String)))

        Dim tEMPLATE_DESCParameter As ObjectParameter = If(tEMPLATE_DESC IsNot Nothing, New ObjectParameter("TEMPLATE_DESC", tEMPLATE_DESC), New ObjectParameter("TEMPLATE_DESC", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("SP_UPDATESCHEDULETEMPLATE", tEMPLATE_IDParameter, tEMPLATE_NAMEParameter, tEMPLATE_DESCParameter)
    End Function

    Public Overridable Function sp_upgraddiagrams() As Integer
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("sp_upgraddiagrams")
    End Function

    Public Overridable Function SP_VendorSAP() As ObjectResult(Of SP_VendorSAP_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_VendorSAP_Result)("SP_VendorSAP")
    End Function

    Public Overridable Function SP_WFALLNONSPOOL(pROJID As String) As ObjectResult(Of SP_WFALLNONSPOOL_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFALLNONSPOOL_Result)("SP_WFALLNONSPOOL", pROJIDParameter)
    End Function

    Public Overridable Function SP_WFALLNONSPOOLDETAIL(pROJID As String, iSOMETRIC As String) As ObjectResult(Of SP_WFALLNONSPOOLDETAIL_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim iSOMETRICParameter As ObjectParameter = If(iSOMETRIC IsNot Nothing, New ObjectParameter("ISOMETRIC", iSOMETRIC), New ObjectParameter("ISOMETRIC", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFALLNONSPOOLDETAIL_Result)("SP_WFALLNONSPOOLDETAIL", pROJIDParameter, iSOMETRICParameter)
    End Function

    Public Overridable Function SP_WFALLSPOOL(pROJECTID As String, sUBCONT As String) As ObjectResult(Of SP_WFALLSPOOL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFALLSPOOL_Result)("SP_WFALLSPOOL", pROJECTIDParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_WFALLSPOOL_OLD(pROJECTID As String, sUBCONT As String) As ObjectResult(Of SP_WFALLSPOOL_OLD_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFALLSPOOL_OLD_Result)("SP_WFALLSPOOL_OLD", pROJECTIDParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_WFBOOKEDSPOOL(pROJECTID As String, sUBCONT As String) As ObjectResult(Of SP_WFBOOKEDSPOOL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFBOOKEDSPOOL_Result)("SP_WFBOOKEDSPOOL", pROJECTIDParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_WFOUTSTANDINGSPOOL(pROJECTID As String, sUBCONT As String) As ObjectResult(Of SP_WFOUTSTANDINGSPOOL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFOUTSTANDINGSPOOL_Result)("SP_WFOUTSTANDINGSPOOL", pROJECTIDParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_WFRESERVEDSPOOL(pROJECTID As String, sUBCONT As String) As ObjectResult(Of SP_WFRESERVEDSPOOL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim sUBCONTParameter As ObjectParameter = If(sUBCONT IsNot Nothing, New ObjectParameter("SUBCONT", sUBCONT), New ObjectParameter("SUBCONT", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFRESERVEDSPOOL_Result)("SP_WFRESERVEDSPOOL", pROJECTIDParameter, sUBCONTParameter)
    End Function

    Public Overridable Function SP_WFSPOOLMATERIAL(sPOOL_ID As String, pROJECTID As String) As ObjectResult(Of SP_WFSPOOLMATERIAL_Result)
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFSPOOLMATERIAL_Result)("SP_WFSPOOLMATERIAL", sPOOL_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function SP_WFSPOOLMATERIAL2(sPOOL_ID As String, pROJECTID As String) As ObjectResult(Of SP_WFSPOOLMATERIAL2_Result)
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of SP_WFSPOOLMATERIAL2_Result)("SP_WFSPOOLMATERIAL2", sPOOL_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function USAP_SELECTMAXPOVALUE(vENDOR_CODE As String) As ObjectResult(Of USAP_SELECTMAXPOVALUE_Result)
        Dim vENDOR_CODEParameter As ObjectParameter = If(vENDOR_CODE IsNot Nothing, New ObjectParameter("VENDOR_CODE", vENDOR_CODE), New ObjectParameter("VENDOR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USAP_SELECTMAXPOVALUE_Result)("USAP_SELECTMAXPOVALUE", vENDOR_CODEParameter)
    End Function

    Public Overridable Function USP_ADDITIONAL_COST(iNQUIRY_ID As String, cOSTBIDDER As String) As ObjectResult(Of USP_ADDITIONAL_COST_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Dim cOSTBIDDERParameter As ObjectParameter = If(cOSTBIDDER IsNot Nothing, New ObjectParameter("COSTBIDDER", cOSTBIDDER), New ObjectParameter("COSTBIDDER", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_ADDITIONAL_COST_Result)("USP_ADDITIONAL_COST", iNQUIRY_IDParameter, cOSTBIDDERParameter)
    End Function

    Public Overridable Function USP_ALL_PO(kEYWORD As String) As ObjectResult(Of USP_ALL_PO_Result)
        Dim kEYWORDParameter As ObjectParameter = If(kEYWORD IsNot Nothing, New ObjectParameter("KEYWORD", kEYWORD), New ObjectParameter("KEYWORD", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_ALL_PO_Result)("USP_ALL_PO", kEYWORDParameter)
    End Function

    Public Overridable Function USP_ALL_PO_MATERIAL(kEYWORD As String) As ObjectResult(Of USP_ALL_PO_MATERIAL_Result)
        Dim kEYWORDParameter As ObjectParameter = If(kEYWORD IsNot Nothing, New ObjectParameter("KEYWORD", kEYWORD), New ObjectParameter("KEYWORD", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_ALL_PO_MATERIAL_Result)("USP_ALL_PO_MATERIAL", kEYWORDParameter)
    End Function

    Public Overridable Function USP_API_GETDATASYSTEMPAINTING(code_project As String) As ObjectResult(Of USP_API_GETDATASYSTEMPAINTING_Result)
        Dim code_projectParameter As ObjectParameter = If(code_project IsNot Nothing, New ObjectParameter("code_project", code_project), New ObjectParameter("code_project", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_API_GETDATASYSTEMPAINTING_Result)("USP_API_GETDATASYSTEMPAINTING", code_projectParameter)
    End Function

    Public Overridable Function USP_API_GETDATAVOLUME(code_project As String, spool_no As String) As ObjectResult(Of USP_API_GETDATAVOLUME_Result)
        Dim code_projectParameter As ObjectParameter = If(code_project IsNot Nothing, New ObjectParameter("code_project", code_project), New ObjectParameter("code_project", GetType(String)))

        Dim spool_noParameter As ObjectParameter = If(spool_no IsNot Nothing, New ObjectParameter("spool_no", spool_no), New ObjectParameter("spool_no", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_API_GETDATAVOLUME_Result)("USP_API_GETDATAVOLUME", code_projectParameter, spool_noParameter)
    End Function

    Public Overridable Function USP_APPROVER() As ObjectResult(Of USP_APPROVER_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_APPROVER_Result)("USP_APPROVER")
    End Function

    Public Overridable Function USP_BIDDER_SUMMARY(iNQUIRY_ID As String) As ObjectResult(Of USP_BIDDER_SUMMARY_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BIDDER_SUMMARY_Result)("USP_BIDDER_SUMMARY", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_BOOKING_NO(pROJECTID As String, dISCIPLINE As String) As ObjectResult(Of USP_BOOKING_NO_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BOOKING_NO_Result)("USP_BOOKING_NO", pROJECTIDParameter, dISCIPLINEParameter)
    End Function

    Public Overridable Function USP_BOOKNUMBER(pROJECTID As String, dISCIPLINE As String) As ObjectResult(Of USP_BOOKNUMBER_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BOOKNUMBER_Result)("USP_BOOKNUMBER", pROJECTIDParameter, dISCIPLINEParameter)
    End Function

    Public Overridable Function USP_BOOKNUMBER_NONSPOOL(pROJECTID As String, dISCIPLINE As String) As ObjectResult(Of USP_BOOKNUMBER_NONSPOOL_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BOOKNUMBER_NONSPOOL_Result)("USP_BOOKNUMBER_NONSPOOL", pROJECTIDParameter, dISCIPLINEParameter)
    End Function

    Public Overridable Function USP_BQ(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_BQ_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BQ_Result)("USP_BQ", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_BQDOCUMENT(bQ_ID As String) As ObjectResult(Of USP_BQDOCUMENT_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BQDOCUMENT_Result)("USP_BQDOCUMENT", bQ_IDParameter)
    End Function

    Public Overridable Function USP_BQMATERIAL(bQ_ID As String) As ObjectResult(Of USP_BQMATERIAL_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BQMATERIAL_Result)("USP_BQMATERIAL", bQ_IDParameter)
    End Function

    Public Overridable Function USP_BQMATERIAL_INC(iNQUIRY_ID As String, pROJECT_CODE As String) As ObjectResult(Of USP_BQMATERIAL_INC_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_BQMATERIAL_INC_Result)("USP_BQMATERIAL_INC", iNQUIRY_IDParameter, pROJECT_CODEParameter)
    End Function

    Public Overridable Function USP_COUNTER_DIA_INCH(pROJECTID As String, cOUNTER As Nullable(Of Integer)) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim cOUNTERParameter As ObjectParameter = If(cOUNTER.HasValue, New ObjectParameter("COUNTER", cOUNTER), New ObjectParameter("COUNTER", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_COUNTER_DIA_INCH", pROJECTIDParameter, cOUNTERParameter)
    End Function

    Public Overridable Function USP_IMPORT_DATAPO(pROJECTID As String) As ObjectResult(Of USP_IMPORT_DATAPO_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_IMPORT_DATAPO_Result)("USP_IMPORT_DATAPO", pROJECTIDParameter)
    End Function

    Public Overridable Function USP_IMPORT_DATAPO_FOR_ICONS(pROJECTID As String) As ObjectResult(Of USP_IMPORT_DATAPO_FOR_ICONS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_IMPORT_DATAPO_FOR_ICONS_Result)("USP_IMPORT_DATAPO_FOR_ICONS", pROJECTIDParameter)
    End Function

    Public Overridable Function USP_INQBIDDERLIST(iNQUIRY_ID As String) As ObjectResult(Of USP_INQBIDDERLIST_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INQBIDDERLIST_Result)("USP_INQBIDDERLIST", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INQUIRYDOCUMENT(iNQUIRY_ID As String) As ObjectResult(Of USP_INQUIRYDOCUMENT_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INQUIRYDOCUMENT_Result)("USP_INQUIRYDOCUMENT", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INQUIRYDOCUMENT_SUMMARY(iNQUIRY_ID As String) As ObjectResult(Of USP_INQUIRYDOCUMENT_SUMMARY_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INQUIRYDOCUMENT_SUMMARY_Result)("USP_INQUIRYDOCUMENT_SUMMARY", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INQUIRYMATERIAL_INC(iNQUIRY_ID As String) As ObjectResult(Of USP_INQUIRYMATERIAL_INC_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INQUIRYMATERIAL_INC_Result)("USP_INQUIRYMATERIAL_INC", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INQUIRYMATERIAL_SUMMARY(iNQUIRY_ID As String) As ObjectResult(Of USP_INQUIRYMATERIAL_SUMMARY_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INQUIRYMATERIAL_SUMMARY_Result)("USP_INQUIRYMATERIAL_SUMMARY", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INQUIRYREQUISITION_INC(iNQUIRY_ID As String) As ObjectResult(Of USP_INQUIRYREQUISITION_INC_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INQUIRYREQUISITION_INC_Result)("USP_INQUIRYREQUISITION_INC", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INSERTBQMATERIAL(bQ_ID As String, nEWBQ_ID As String) As Integer
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Dim nEWBQ_IDParameter As ObjectParameter = If(nEWBQ_ID IsNot Nothing, New ObjectParameter("NEWBQ_ID", nEWBQ_ID), New ObjectParameter("NEWBQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_INSERTBQMATERIAL", bQ_IDParameter, nEWBQ_IDParameter)
    End Function

    Public Overridable Function USP_INVBIDDER(iNQUIRY_ID As String) As ObjectResult(Of USP_INVBIDDER_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INVBIDDER_Result)("USP_INVBIDDER", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_INVITED_BIDDER(iNQ_ID As String) As ObjectResult(Of USP_INVITED_BIDDER_Result)
        Dim iNQ_IDParameter As ObjectParameter = If(iNQ_ID IsNot Nothing, New ObjectParameter("INQ_ID", iNQ_ID), New ObjectParameter("INQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_INVITED_BIDDER_Result)("USP_INVITED_BIDDER", iNQ_IDParameter)
    End Function

    Public Overridable Function USP_MASTERBOARD(projid As String, discipline As String) As ObjectResult(Of USP_MASTERBOARD_Result)
        Dim projidParameter As ObjectParameter = If(projid IsNot Nothing, New ObjectParameter("projid", projid), New ObjectParameter("projid", GetType(String)))

        Dim disciplineParameter As ObjectParameter = If(discipline IsNot Nothing, New ObjectParameter("discipline", discipline), New ObjectParameter("discipline", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MASTERBOARD_Result)("USP_MASTERBOARD", projidParameter, disciplineParameter)
    End Function

    Public Overridable Function USP_MASTERPLAN_GETPROGRESS(pROJECT_ID As String) As ObjectResult(Of USP_MASTERPLAN_GETPROGRESS_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MASTERPLAN_GETPROGRESS_Result)("USP_MASTERPLAN_GETPROGRESS", pROJECT_IDParameter)
    End Function

    Public Overridable Function USP_MASTERPLAN_GETPROGRESSDISCIPLINE(pROJECT_ID As String) As ObjectResult(Of USP_MASTERPLAN_GETPROGRESSDISCIPLINE_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MASTERPLAN_GETPROGRESSDISCIPLINE_Result)("USP_MASTERPLAN_GETPROGRESSDISCIPLINE", pROJECT_IDParameter)
    End Function

    Public Overridable Function USP_MASTERPLAN_GETPROGRESSDISCIPLINE2(pROJECT_ID As String) As ObjectResult(Of USP_MASTERPLAN_GETPROGRESSDISCIPLINE2_Result)
        Dim pROJECT_IDParameter As ObjectParameter = If(pROJECT_ID IsNot Nothing, New ObjectParameter("PROJECT_ID", pROJECT_ID), New ObjectParameter("PROJECT_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MASTERPLAN_GETPROGRESSDISCIPLINE2_Result)("USP_MASTERPLAN_GETPROGRESSDISCIPLINE2", pROJECT_IDParameter)
    End Function

    Public Overridable Function USP_MATERIAL_TRACKING(pROJECT_CODE As String, iDENTITY_CODE As String) As ObjectResult(Of USP_MATERIAL_TRACKING_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim iDENTITY_CODEParameter As ObjectParameter = If(iDENTITY_CODE IsNot Nothing, New ObjectParameter("IDENTITY_CODE", iDENTITY_CODE), New ObjectParameter("IDENTITY_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MATERIAL_TRACKING_Result)("USP_MATERIAL_TRACKING", pROJECT_CODEParameter, iDENTITY_CODEParameter)
    End Function

    Public Overridable Function USP_MATSUPPLY_PROJECT(pROJID As String) As ObjectResult(Of USP_MATSUPPLY_PROJECT_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MATSUPPLY_PROJECT_Result)("USP_MATSUPPLY_PROJECT", pROJIDParameter)
    End Function

    Public Overridable Function USP_MENU_ACCESS_PAGE(rOLECODE As String) As ObjectResult(Of USP_MENU_ACCESS_PAGE_Result)
        Dim rOLECODEParameter As ObjectParameter = If(rOLECODE IsNot Nothing, New ObjectParameter("ROLECODE", rOLECODE), New ObjectParameter("ROLECODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MENU_ACCESS_PAGE_Result)("USP_MENU_ACCESS_PAGE", rOLECODEParameter)
    End Function

    Public Overridable Function USP_MTO(dATASOURCE As String, rELEASEPERCENT As Nullable(Of Decimal), pROJECT_CODE As String, dISCIPLINE As String) As ObjectResult(Of USP_MTO_Result)
        Dim dATASOURCEParameter As ObjectParameter = If(dATASOURCE IsNot Nothing, New ObjectParameter("DATASOURCE", dATASOURCE), New ObjectParameter("DATASOURCE", GetType(String)))

        Dim rELEASEPERCENTParameter As ObjectParameter = If(rELEASEPERCENT.HasValue, New ObjectParameter("RELEASEPERCENT", rELEASEPERCENT), New ObjectParameter("RELEASEPERCENT", GetType(Decimal)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MTO_Result)("USP_MTO", dATASOURCEParameter, rELEASEPERCENTParameter, pROJECT_CODEParameter, dISCIPLINEParameter)
    End Function

    Public Overridable Function USP_MTO_ETDAH(dATASOURCE As String, rELEASEPERCENT As Nullable(Of Decimal), pROJECT_CODE As String, dISCIPLINE As String) As ObjectResult(Of USP_MTO_ETDAH_Result)
        Dim dATASOURCEParameter As ObjectParameter = If(dATASOURCE IsNot Nothing, New ObjectParameter("DATASOURCE", dATASOURCE), New ObjectParameter("DATASOURCE", GetType(String)))

        Dim rELEASEPERCENTParameter As ObjectParameter = If(rELEASEPERCENT.HasValue, New ObjectParameter("RELEASEPERCENT", rELEASEPERCENT), New ObjectParameter("RELEASEPERCENT", GetType(Decimal)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MTO_ETDAH_Result)("USP_MTO_ETDAH", dATASOURCEParameter, rELEASEPERCENTParameter, pROJECT_CODEParameter, dISCIPLINEParameter)
    End Function

    Public Overridable Function USP_MTO_OUTSTANDING(dATASOURCE As String, rELEASEPERCENT As Nullable(Of Decimal), pROJECT_CODE As String, dISCIPLINE As String) As ObjectResult(Of USP_MTO_OUTSTANDING_Result)
        Dim dATASOURCEParameter As ObjectParameter = If(dATASOURCE IsNot Nothing, New ObjectParameter("DATASOURCE", dATASOURCE), New ObjectParameter("DATASOURCE", GetType(String)))

        Dim rELEASEPERCENTParameter As ObjectParameter = If(rELEASEPERCENT.HasValue, New ObjectParameter("RELEASEPERCENT", rELEASEPERCENT), New ObjectParameter("RELEASEPERCENT", GetType(Decimal)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MTO_OUTSTANDING_Result)("USP_MTO_OUTSTANDING", dATASOURCEParameter, rELEASEPERCENTParameter, pROJECT_CODEParameter, dISCIPLINEParameter)
    End Function

    Public Overridable Function USP_MYROLE(mEMBERCODE As String) As ObjectResult(Of USP_MYROLE_Result)
        Dim mEMBERCODEParameter As ObjectParameter = If(mEMBERCODE IsNot Nothing, New ObjectParameter("MEMBERCODE", mEMBERCODE), New ObjectParameter("MEMBERCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_MYROLE_Result)("USP_MYROLE", mEMBERCODEParameter)
    End Function

    Public Overridable Function USP_NEWSTICKER(pROJECT_CODE As String, rOLE_CODE As String, dISCPLINE_CODE As String) As ObjectResult(Of USP_NEWSTICKER_Result)
        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Dim rOLE_CODEParameter As ObjectParameter = If(rOLE_CODE IsNot Nothing, New ObjectParameter("ROLE_CODE", rOLE_CODE), New ObjectParameter("ROLE_CODE", GetType(String)))

        Dim dISCPLINE_CODEParameter As ObjectParameter = If(dISCPLINE_CODE IsNot Nothing, New ObjectParameter("DISCPLINE_CODE", dISCPLINE_CODE), New ObjectParameter("DISCPLINE_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_NEWSTICKER_Result)("USP_NEWSTICKER", pROJECT_CODEParameter, rOLE_CODEParameter, dISCPLINE_CODEParameter)
    End Function

    Public Overridable Function USP_PO(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_PO_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PO_Result)("USP_PO", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_PO_APPROVAL() As ObjectResult(Of USP_PO_APPROVAL_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PO_APPROVAL_Result)("USP_PO_APPROVAL")
    End Function

    Public Overridable Function USP_PO_PRINT(pOID As String) As ObjectResult(Of USP_PO_PRINT_Result)
        Dim pOIDParameter As ObjectParameter = If(pOID IsNot Nothing, New ObjectParameter("POID", pOID), New ObjectParameter("POID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PO_PRINT_Result)("USP_PO_PRINT", pOIDParameter)
    End Function

    Public Overridable Function USP_PO_PRINT_MATERIAL(pO_ID As String) As ObjectResult(Of USP_PO_PRINT_MATERIAL_Result)
        Dim pO_IDParameter As ObjectParameter = If(pO_ID IsNot Nothing, New ObjectParameter("PO_ID", pO_ID), New ObjectParameter("PO_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PO_PRINT_MATERIAL_Result)("USP_PO_PRINT_MATERIAL", pO_IDParameter)
    End Function

    Public Overridable Function USP_PO_PRINT_OLD(pOID As String) As ObjectResult(Of USP_PO_PRINT_OLD_Result)
        Dim pOIDParameter As ObjectParameter = If(pOID IsNot Nothing, New ObjectParameter("POID", pOID), New ObjectParameter("POID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PO_PRINT_OLD_Result)("USP_PO_PRINT_OLD", pOIDParameter)
    End Function

    Public Overridable Function USP_PURCHASEORDERDOCUMENT(pO_ID As String) As ObjectResult(Of USP_PURCHASEORDERDOCUMENT_Result)
        Dim pO_IDParameter As ObjectParameter = If(pO_ID IsNot Nothing, New ObjectParameter("PO_ID", pO_ID), New ObjectParameter("PO_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PURCHASEORDERDOCUMENT_Result)("USP_PURCHASEORDERDOCUMENT", pO_IDParameter)
    End Function

    Public Overridable Function USP_PURCHASEORDERITEM(pO_ID As String) As ObjectResult(Of USP_PURCHASEORDERITEM_Result)
        Dim pO_IDParameter As ObjectParameter = If(pO_ID IsNot Nothing, New ObjectParameter("PO_ID", pO_ID), New ObjectParameter("PO_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_PURCHASEORDERITEM_Result)("USP_PURCHASEORDERITEM", pO_IDParameter)
    End Function

    Public Overridable Function USP_QUOTATION(iNQUIRYID As String) As ObjectResult(Of USP_QUOTATION_Result)
        Dim iNQUIRYIDParameter As ObjectParameter = If(iNQUIRYID IsNot Nothing, New ObjectParameter("INQUIRYID", iNQUIRYID), New ObjectParameter("INQUIRYID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_QUOTATION_Result)("USP_QUOTATION", iNQUIRYIDParameter)
    End Function

    Public Overridable Function USP_RELEASED_BQLIST(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_RELEASED_BQLIST_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASED_BQLIST_Result)("USP_RELEASED_BQLIST", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_RELEASED_POLIST(pR_CODE As String) As ObjectResult(Of USP_RELEASED_POLIST_Result)
        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASED_POLIST_Result)("USP_RELEASED_POLIST", pR_CODEParameter)
    End Function

    Public Overridable Function USP_RELEASED_REQLIST(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_RELEASED_REQLIST_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASED_REQLIST_Result)("USP_RELEASED_REQLIST", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_RELEASED_REQUISITIONLIST(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_RELEASED_REQUISITIONLIST_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASED_REQUISITIONLIST_Result)("USP_RELEASED_REQUISITIONLIST", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_RELEASED_REQUISITIONPLANLIST(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_RELEASED_REQUISITIONPLANLIST_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASED_REQUISITIONPLANLIST_Result)("USP_RELEASED_REQUISITIONPLANLIST", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_RELEASEDBQ(bQ_ID As String) As ObjectResult(Of USP_RELEASEDBQ_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASEDBQ_Result)("USP_RELEASEDBQ", bQ_IDParameter)
    End Function

    Public Overridable Function USP_RELEASEDREQ(bQ_ID As String) As ObjectResult(Of USP_RELEASEDREQ_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_RELEASEDREQ_Result)("USP_RELEASEDREQ", bQ_IDParameter)
    End Function

    Public Overridable Function USP_REPORT_EXPEDITING() As ObjectResult(Of USP_REPORT_EXPEDITING_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REPORT_EXPEDITING_Result)("USP_REPORT_EXPEDITING")
    End Function

    Public Overridable Function USP_REPORT_tEQUIPMENT(sHIPPING_ID As String) As ObjectResult(Of USP_REPORT_tEQUIPMENT_Result)
        Dim sHIPPING_IDParameter As ObjectParameter = If(sHIPPING_ID IsNot Nothing, New ObjectParameter("SHIPPING_ID", sHIPPING_ID), New ObjectParameter("SHIPPING_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REPORT_tEQUIPMENT_Result)("USP_REPORT_tEQUIPMENT", sHIPPING_IDParameter)
    End Function

    Public Overridable Function USP_REPORT_tRSR(sHIPNO As String) As ObjectResult(Of USP_REPORT_tRSR_Result)
        Dim sHIPNOParameter As ObjectParameter = If(sHIPNO IsNot Nothing, New ObjectParameter("SHIPNO", sHIPNO), New ObjectParameter("SHIPNO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REPORT_tRSR_Result)("USP_REPORT_tRSR", sHIPNOParameter)
    End Function

    Public Overridable Function USP_REPORT_tSHIPPING(sHIPNO As String, pROJECT_CODE As String) As ObjectResult(Of USP_REPORT_tSHIPPING_Result)
        Dim sHIPNOParameter As ObjectParameter = If(sHIPNO IsNot Nothing, New ObjectParameter("SHIPNO", sHIPNO), New ObjectParameter("SHIPNO", GetType(String)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REPORT_tSHIPPING_Result)("USP_REPORT_tSHIPPING", sHIPNOParameter, pROJECT_CODEParameter)
    End Function

    Public Overridable Function USP_REPORTSHIPPING(sHIPNO As String) As Integer
        Dim sHIPNOParameter As ObjectParameter = If(sHIPNO IsNot Nothing, New ObjectParameter("SHIPNO", sHIPNO), New ObjectParameter("SHIPNO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_REPORTSHIPPING", sHIPNOParameter)
    End Function

    Public Overridable Function USP_REQ(dISCIPLINE As String, pR_CODE As String) As ObjectResult(Of USP_REQ_Result)
        Dim dISCIPLINEParameter As ObjectParameter = If(dISCIPLINE IsNot Nothing, New ObjectParameter("DISCIPLINE", dISCIPLINE), New ObjectParameter("DISCIPLINE", GetType(String)))

        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REQ_Result)("USP_REQ", dISCIPLINEParameter, pR_CODEParameter)
    End Function

    Public Overridable Function USP_REQMATERIAL(bQ_ID As String) As ObjectResult(Of USP_REQMATERIAL_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REQMATERIAL_Result)("USP_REQMATERIAL", bQ_IDParameter)
    End Function

    Public Overridable Function USP_REQMATERIAL_INC(iNQUIRY_ID As String, pROJECT_CODE As String) As ObjectResult(Of USP_REQMATERIAL_INC_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_REQMATERIAL_INC_Result)("USP_REQMATERIAL_INC", iNQUIRY_IDParameter, pROJECT_CODEParameter)
    End Function

    Public Overridable Function USP_SCDD() As ObjectResult(Of USP_SCDD_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SCDD_Result)("USP_SCDD")
    End Function

    Public Overridable Function USP_SELECT_BIDDER(iNQUIRY_ID As String) As ObjectResult(Of USP_SELECT_BIDDER_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_BIDDER_Result)("USP_SELECT_BIDDER", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_SELECT_BIDTABULATION() As ObjectResult(Of USP_SELECT_BIDTABULATION_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_BIDTABULATION_Result)("USP_SELECT_BIDTABULATION")
    End Function

    Public Overridable Function USP_SELECT_BQ(dISCIPLINE_CODE As String, pROJECT_CODE As String) As ObjectResult(Of USP_SELECT_BQ_Result)
        Dim dISCIPLINE_CODEParameter As ObjectParameter = If(dISCIPLINE_CODE IsNot Nothing, New ObjectParameter("DISCIPLINE_CODE", dISCIPLINE_CODE), New ObjectParameter("DISCIPLINE_CODE", GetType(String)))

        Dim pROJECT_CODEParameter As ObjectParameter = If(pROJECT_CODE IsNot Nothing, New ObjectParameter("PROJECT_CODE", pROJECT_CODE), New ObjectParameter("PROJECT_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_BQ_Result)("USP_SELECT_BQ", dISCIPLINE_CODEParameter, pROJECT_CODEParameter)
    End Function

    Public Overridable Function USP_SELECT_BQMATERIAL(bQ_ID As String) As ObjectResult(Of USP_SELECT_BQMATERIAL_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_BQMATERIAL_Result)("USP_SELECT_BQMATERIAL", bQ_IDParameter)
    End Function

    Public Overridable Function USP_SELECT_DIA_INCH(pROJECTID As String) As ObjectResult(Of Nullable(Of Integer))
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("USP_SELECT_DIA_INCH", pROJECTIDParameter)
    End Function

    Public Overridable Function USP_SELECT_MTO(pROJID As String, dISCIPCODE As String) As ObjectResult(Of USP_SELECT_MTO_Result)
        Dim pROJIDParameter As ObjectParameter = If(pROJID IsNot Nothing, New ObjectParameter("PROJID", pROJID), New ObjectParameter("PROJID", GetType(String)))

        Dim dISCIPCODEParameter As ObjectParameter = If(dISCIPCODE IsNot Nothing, New ObjectParameter("DISCIPCODE", dISCIPCODE), New ObjectParameter("DISCIPCODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_MTO_Result)("USP_SELECT_MTO", pROJIDParameter, dISCIPCODEParameter)
    End Function

    Public Overridable Function USP_SELECT_PO(pR_CODE As String) As ObjectResult(Of USP_SELECT_PO_Result)
        Dim pR_CODEParameter As ObjectParameter = If(pR_CODE IsNot Nothing, New ObjectParameter("PR_CODE", pR_CODE), New ObjectParameter("PR_CODE", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_PO_Result)("USP_SELECT_PO", pR_CODEParameter)
    End Function

    Public Overridable Function USP_SELECT_REQMATERIAL(bQ_ID As String) As ObjectResult(Of USP_SELECT_REQMATERIAL_Result)
        Dim bQ_IDParameter As ObjectParameter = If(bQ_ID IsNot Nothing, New ObjectParameter("BQ_ID", bQ_ID), New ObjectParameter("BQ_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_REQMATERIAL_Result)("USP_SELECT_REQMATERIAL", bQ_IDParameter)
    End Function

    Public Overridable Function USP_SELECT_SHIPMENT(sI_NO As String) As ObjectResult(Of USP_SELECT_SHIPMENT_Result)
        Dim sI_NOParameter As ObjectParameter = If(sI_NO IsNot Nothing, New ObjectParameter("SI_NO", sI_NO), New ObjectParameter("SI_NO", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_SHIPMENT_Result)("USP_SELECT_SHIPMENT", sI_NOParameter)
    End Function

    Public Overridable Function USP_SELECT_VENDOR(iNQUIRY_ID As String) As ObjectResult(Of USP_SELECT_VENDOR_Result)
        Dim iNQUIRY_IDParameter As ObjectParameter = If(iNQUIRY_ID IsNot Nothing, New ObjectParameter("INQUIRY_ID", iNQUIRY_ID), New ObjectParameter("INQUIRY_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_SELECT_VENDOR_Result)("USP_SELECT_VENDOR", iNQUIRY_IDParameter)
    End Function

    Public Overridable Function USP_UNCOUNTER_DIA_INCH(pROJECTID As String, cOUNTER As Nullable(Of Integer)) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Dim cOUNTERParameter As ObjectParameter = If(cOUNTER.HasValue, New ObjectParameter("COUNTER", cOUNTER), New ObjectParameter("COUNTER", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("USP_UNCOUNTER_DIA_INCH", pROJECTIDParameter, cOUNTERParameter)
    End Function

    Public Overridable Function USP_VENDOR() As ObjectResult(Of USP_VENDOR_Result)
        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_VENDOR_Result)("USP_VENDOR")
    End Function

    Public Overridable Function USP_VENDORWORKFRONT(pROJECTID As String) As ObjectResult(Of USP_VENDORWORKFRONT_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_VENDORWORKFRONT_Result)("USP_VENDORWORKFRONT", pROJECTIDParameter)
    End Function

    Public Overridable Function USP_WORKLOAD_ANALYSIS(pROJECTID As String) As ObjectResult(Of USP_WORKLOAD_ANALYSIS_Result)
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of USP_WORKLOAD_ANALYSIS_Result)("USP_WORKLOAD_ANALYSIS", pROJECTIDParameter)
    End Function

    Public Overridable Function WF_INSERT_BOOKED(sPOOL_ID As String) As Integer
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("WF_INSERT_BOOKED", sPOOL_IDParameter)
    End Function

    Public Overridable Function WF_INSERT_RESERVED(sPOOL_ID As String) As Integer
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("WF_INSERT_RESERVED", sPOOL_IDParameter)
    End Function

    Public Overridable Function WF_UNBOOKING(sPOOL_ID As String, pROJECTID As String) As Integer
        Dim sPOOL_IDParameter As ObjectParameter = If(sPOOL_ID IsNot Nothing, New ObjectParameter("SPOOL_ID", sPOOL_ID), New ObjectParameter("SPOOL_ID", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("WF_UNBOOKING", sPOOL_IDParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function WF_UNRESERVED_NONSPOOL(iSO_NO As String, pROJECTID As String) As Integer
        Dim iSO_NOParameter As ObjectParameter = If(iSO_NO IsNot Nothing, New ObjectParameter("ISO_NO", iSO_NO), New ObjectParameter("ISO_NO", GetType(String)))

        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("WF_UNRESERVED_NONSPOOL", iSO_NOParameter, pROJECTIDParameter)
    End Function

    Public Overridable Function WF_UNRESERVEDALL(pROJECTID As String) As Integer
        Dim pROJECTIDParameter As ObjectParameter = If(pROJECTID IsNot Nothing, New ObjectParameter("PROJECTID", pROJECTID), New ObjectParameter("PROJECTID", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("WF_UNRESERVEDALL", pROJECTIDParameter)
    End Function

End Class
